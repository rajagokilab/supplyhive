"""
Django settings for stationery_website project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
from pathlib import Path

# ----------------------
# Base directory
# ----------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ----------------------
# Security
# ----------------------
SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback-secret-key')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = ['*']

# ----------------------
# Installed apps
# ----------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'shop',            # your app
    'cloudinary',      # Cloudinary integration
    'cloudinary_storage',
]

# ----------------------
# Middleware
# ----------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ----------------------
# URLs and WSGI
# ----------------------
ROOT_URLCONF = 'stationery_website.urls'
WSGI_APPLICATION = 'stationery_website.wsgi.application'

# ----------------------
# Templates
# ----------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "shop/templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ----------------------
# Database
# ----------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # simple for small projects
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ----------------------
# Password validation
# ----------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ----------------------
# Internationalization
# ----------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ----------------------
# Static files (CSS, JS, images)
# ----------------------
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "shop/static"]  # dev static folder
STATIC_ROOT = BASE_DIR / "staticfiles"         # collectstatic output
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ----------------------
# Media files (Cloudinary)
# ----------------------
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUD_NAME', 'your-cloud-name'),
    'API_KEY': os.environ.get('CLOUD_API_KEY', 'your-api-key'),
    'API_SECRET': os.environ.get('CLOUD_API_SECRET', 'your-api-secret')
}

# ----------------------
# Default primary key
# ----------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ----------------------
# Authentication & Sessions
# ----------------------
LOGIN_URL = '/auth/'
LOGIN_REDIRECT_URL = '/'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# ----------------------
# Deployment Notes
# ----------------------
# 1. Run `python manage.py collectstatic --noinput` before deploying.
# 2. Set SECRET_KEY, DEBUG, ALLOWED_HOSTS, and Cloudinary credentials as environment variables on Render.
# 3. WhiteNoise serves static files in production.
# 4. Cloudinary serves all uploaded media files.
